name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-microservices:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies for User Service
        working-directory: ./microservices/user-service
        run: |
          npm ci

      - name: Build User Service
        run: docker compose build user-service

      - name: Install dependencies for AI Service
        working-directory: ./microservices/ai-service
        run: |
          npm ci

      - name: Build AI Service
        run: docker compose build ai-service

      - name: Install dependencies for Export Service
        working-directory: ./microservices/export-service
        run: |
          npm ci

      - name: Build Export Service
        run: docker compose build export-service

      - name: Install dependencies for CV Review Service
        working-directory: ./microservices/cv-review-service
        run: |
          npm ci

      - name: Build CV Review Service
        run: docker compose build cv-review-service

  build-api-gateway:
    runs-on: ubuntu-latest
    needs: build-microservices
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log into registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_ENDPOINT }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Install dependencies for API Gateway
        working-directory: ./api-gateway
        run: npm ci

      - name: Build API Gateway
        run: docker compose build api-gateway

  deploy-to-acr:
    runs-on: ubuntu-latest
    needs:
      [
        build-microservices,
        build-api-gateway,
        snyk-security,
        sonarcloud-analysis,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log into registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_ENDPOINT }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build & Push user-service
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./microservices/user-service
          tags: ${{ secrets.ACR_ENDPOINT }}/user-service:${{ github.sha }}
          platforms: linux/amd64

      - name: Build & Push ai-service
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./microservices/ai-service
          tags: ${{ secrets.ACR_ENDPOINT }}/ai-service:${{ github.sha }}
          platforms: linux/amd64

      - name: Build & Push export-service
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./microservices/export-service
          tags: ${{ secrets.ACR_ENDPOINT }}/export-service:${{ github.sha }}
          platforms: linux/amd64

      - name: Build & Push cv-review-service
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./microservices/cv-review-service
          tags: ${{ secrets.ACR_ENDPOINT }}/cv-review-service:${{ github.sha }}
          platforms: linux/amd64

      - name: Build & Push auth-service
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./microservices/auth-service
          tags: ${{ secrets.ACR_ENDPOINT }}/auth-service:${{ github.sha }}
          platforms: linux/amd64

      - name: Build & Push api-gateway
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./api-gateway
          tags: ${{ secrets.ACR_ENDPOINT }}/api-gateway:${{ github.sha }}
          platforms: linux/amd64

  update-k8s-yaml:
    runs-on: ubuntu-latest
    needs: deploy-to-acr
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Update image tags in k8s-azure.yaml
        run: |
          sed -i "s|image: ai-powered-resume-builder-user-service|image: ${{ secrets.ACR_ENDPOINT }}/user-service:${{ github.sha }}|g" k8s-azure.yaml
          sed -i "s|image: ai-powered-resume-builder-ai-service|image: ${{ secrets.ACR_ENDPOINT }}/ai-service:${{ github.sha }}|g" k8s-azure.yaml
          sed -i "s|image: ai-powered-resume-builder-export-service|image: ${{ secrets.ACR_ENDPOINT }}/export-service:${{ github.sha }}|g" k8s-azure.yaml
          sed -i "s|image: ai-powered-resume-builder-cv-review-service|image: ${{ secrets.ACR_ENDPOINT }}/cv-review-service:${{ github.sha }}|g" k8s-azure.yaml
          sed -i "s|image: ai-powered-resume-builder-auth-service|image: ${{ secrets.ACR_ENDPOINT }}/auth-service:${{ github.sha }}|g" k8s-azure.yaml
          sed -i "s|image: ai-powered-resume-builder-api-gateway|image: ${{ secrets.ACR_ENDPOINT }}/api-gateway:${{ github.sha }}|g" k8s-azure.yaml

      - name: Upload updated k8s-azure.yaml
        uses: actions/upload-artifact@v4
        with:
          name: k8s-yaml
          path: k8s-azure.yaml

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: update-k8s-yaml
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Remove existing k8s-azure.yaml
        run: rm -f k8s-azure.yaml

      - name: Download updated k8s-azure.yaml
        uses: actions/download-artifact@v4
        with:
          name: k8s-yaml

      - name: Set kubeconfig from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Create secrets for user-service
        run: |
          kubectl delete secret user-service-secret --ignore-not-found
          kubectl create secret generic user-service-secret \
            --from-literal=MONGODB_URI="${{ secrets.MONGODB_URI }}"

      - name: Create secrets for export-service
        run: |
          kubectl delete secret export-service-secret --ignore-not-found
          kubectl create secret generic export-service-secret \
            --from-literal=MONGODB_URI="${{ secrets.MONGODB_URI }}"

      - name: Create secrets for auth-service
        run: |
          kubectl delete secret auth-service-secret --ignore-not-found
          kubectl create secret generic auth-service-secret \
            --from-literal=AUTH0_DOMAIN="${{ secrets.AUTH0_DOMAIN }}" \
            --from-literal=AUTH0_AUDIENCE="${{ secrets.AUTH0_AUDIENCE }}" \
            --from-literal=AUTH0_CLIENT_ID="${{ secrets.AUTH0_CLIENT_ID }}" \
            --from-literal=AUTH0_CLIENT_SECRET="${{ secrets.AUTH0_CLIENT_SECRET }}" \
            --from-literal=RABBITMQ_URL="${{ secrets.RABBITMQ_URL }}"

      - name: Create secrets for ai-service
        run: |
          kubectl delete secret ai-service-secret --ignore-not-found
          kubectl create secret generic ai-service-secret \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=API_URL="${{ secrets.API_URL }}" \
            --from-literal=RABBITMQ_URL="${{ secrets.RABBITMQ_URL }}"

      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml

      - name: Install ingress-nginx
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/cloud/deploy.yaml

      - name: Apply k8s manifests
        run: kubectl apply -f k8s-azure.yaml

  run-tests:
    name: Run Tests and Collect Coverage
    runs-on: ubuntu-latest
    needs: build-microservices
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Run tests for all microservices
        run: |
          for service in user-service ai-service export-service cv-review-service; do
            echo "▶️ Testing $service"
            cd microservices/$service
            npm ci
            npm install --save-dev jest
            npm test -- --coverage --coverageDirectory=../../coverage/$service
            cd ../../
          done

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  sonarcloud-analysis:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Install dependencies
        run: npm ci

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    needs: build-api-gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Snyk
        run: npm install -g snyk

      - name: Run Snyk test (user-service)
        working-directory: ./microservices/user-service
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test (ai-service)
        working-directory: ./microservices/ai-service
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test (export-service)
        working-directory: ./microservices/export-service
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test (cv-review-service)
        working-directory: ./microservices/cv-review-service
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test (auth-service)
        working-directory: ./microservices/auth-service
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test (api-gateway)
        working-directory: ./api-gateway
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
